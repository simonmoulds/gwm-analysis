# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.
import os

os.environ["PYTHONPATH"] += os.pathsep + "/usr/lib/grass78/etc/python"


configfile: 'config/gwm-cvhydro-config.yml'


rule all:
    input:
        'results/done/grass_write_jules_ancil.done'


rule grass_define_region:
    output:
        touch('results/done/grass_define_regions.done')
    conda:
        'envs/conda_environment_grass.yml'
    script:
        "scripts/grass-define-regions.py"


rule grass_make_jules_land_frac:
    input:
        'results/done/grass_define_regions.done'
    output:
        touch('results/done/grass_make_jules_land_frac.done')
    conda:
        'envs/conda_environment_grass.yml'
    script:
        "scripts/grass-make-jules-land-frac.py"


rule make_c4_fraction:
    output:
        touch('results/done/make_c4_fraction.done')
    script:
        "scripts/make-c4-fraction.R"


rule grass_make_jules_frac:
    input:
        'results/done/grass_make_jules_land_frac.done',
        'results/done/make_c4_fraction.done'
    output:
        touch('results/done/grass_make_jules_frac.done')
    conda:
        'envs/conda_environment_grass.yml'
    script:
        "scripts/grass-make-jules-frac.py"

# TODO - the next three scripts could be simplified
rule grass_make_india_land_frac:
    input:
        'results/done/grass_make_jules_frac.done'
    output:
        touch('results/done/grass_make_india_land_frac.done')
    conda:
        'envs/conda_environment_grass.yml'
    script:
        "scripts/grass-make-india-land-frac.py"


rule make_land_frac:
    output:
        touch('results/done/make_land_frac.done')
    script:
        "scripts/make_land_frac.R"


rule grass_define_igp_region:
    input:
        'results/done/make_land_frac.done',
        'results/done/grass_make_jules_frac.done'
    output:
        touch('results/done/grass_define_igp_region.done')
    conda:
        'envs/conda_environment_grass.yml'
    script:
        "scripts/grass-define-custom-region.py"


# TODO merge this script with grass_make_jules_frac
rule grass_write_jules_ancil:
    input:
        'results/done/grass_define_igp_region.done',
    output:
        touch('results/done/grass_write_jules_ancil.done')
    conda:
        'envs/conda_environment_grass.yml'
    script:
        "scripts/grass-write-jules-ancil-maps.py"

# TODO test the output of the above script

# At this point we need to divide cropland into the following classes:

# c3_irrigated_continuous
# c4_irrigated_continuous
# irrigated_triple_season
# c3_irrigated_triple_season
# c4_irrigated_triple_season
# irrigated_double_season
# c3_irrigated_double_season
# c4_irrigated_double_season
# irrigated_single_season
# c3_irrigated_single_season
# c4_irrigated_single_season
# rainfed
# c3_rainfed
# c4_rainfed
# fallow
# c3_fallow
# c4_fallow

# The driving data will come from ICRISAT. We need a time series of
# maps that show:
# - Single season irrigation
# - Double season irrigation
# - [Triple season irrigation]
# - [Continuous irrigation]
# - Fallow cropland
# Once we have these we can use the C3/C4 fraction data to divide
# between the two classes (as in grass_detect_growing_seasons.sh)

# python3 python/make-ants-frac-input.py -d $OUTDIR/netcdf
# # Next we create a land cover fraction file which includes
# # the additional crop classes (rainfed/irrigated-1/
# # irrigated-2/irrigated-3/fallow as separate PFTs.
# # * jules_frac_5pft_ants_YYYY_SUFFIX.nc
# python3 python/make-frac-input.py -d $OUTDIR/netcdf
